1 - 
    Criar controlador com métodos da operação CRUD
        php artisan make:controller ClienteControlador --resource
    No web.php criamos uma rota resource e ele cria as rotas para cada metodo do controller automaticamente
        Route::resource('clientes', 'ClienteControlador');

2 - Criar uma pasta para cada model dentro da pasta view !?

3 - Uma outra maneira

    return view('clientes.index',['clientes'=>$clientes,'titulo'=>'TOdos os titulos']);
    return view('clientes.index')
        ->with('clientes',$clientes)
        ->with('titulo',"Todos os clientes");

4 - Aula 7.31 - Passagem de parâmetros
    Passagem de parametros para a view:
        return view('clientes.index')->with('clientes',$clientes)->with('titulo',"Todos os clientes");
        return view('clientes.edit',compact(['cliente']));

5 - Aula 7.32 - if / else
    @if(count($clientes)>0)
        <h1> Mostra os clientes</h1>
    @else
        <h1>Não há clientes</h1>
    @endif

    Se o cliente estiver empty mostra a mensagem dentro do h4
    @empty($clientes)
        <h4>1 Não existem clientes cadastrados</h4>
    @endempty

6 - Templates
    Para criar um template que será reutilizado em várias páginas para não ter que ficar repetindo.
    No arquivo que vai ser o principal, principal.blade.php, criamos com @yeld('nomedasecao') 
    Nos arquivos que vai ser o "miolo" usamos @extends('principal') e declaramos a secao com @section('nomedasecao')

7 - Testar rota 
    Testa se a rota é clientes.algumacoisa
        request()->routeIs('clientes.*')
    Testa se a rota é /produtos
        request()->routeIs('produtos')

8 - Loops
    @foreach($Clientes as $c)
        @if($loop->first)
            Primeiro
        @endif

        @if($loop->last)
            Ultimo
        @endif

        {{$loop->index}} //Para pegar o index atual
        {{$loop->count}} //Para pegar o numero de itens
    @endforeach

    @for($i=0;$i<10;$i++)
    @endfor

9 - Passagem de parâmetros para layouts

    Nos arquivos de seção:
        @section('titulo','Clientes Detalhe') //No arquivo index de clientes
        @section('titulo','Clientes Novo')//No arquivo de criação de clienes
    Nos arquivos de template declaramos o yeld onde o titulo deve aparecer
        @yeld('titulo')

10 - Componentes
    O componente é um arquivo .blade.php. por exemplo:
       <div class="box {{$tipo}}">
            <div class="title">{{$titulo}}</div>
            <div class="msg"> {{ $slot }}</div>
        </div>
    Para usar esse componente devemos usar o @component('nomedoarquivoblade'), por exemplo
        @component('nomedoarquivoblade',['titulo'=>'Titulo do alerta','tipo'=>'succes'])
             <strong>Whoops!</strong> Something went wrong!
        @endcomponent

        @component('nomedoarquivoblade',['titulo'=>'Titulo do alerta','tipo'=>'error'])
             <strong>Whoops!</strong> Something went wrong!
        @endcomponent

11 - Alias para Componentes
    Precisamos mexer no AppServiceProvider no método boot adicionando:
        Blade::component('components.alert', 'alert');
    Isso ira criar uma abreviação para podermos usar o componente chamando alert em vez de @component
        @alert(['type' => 'danger'])
            You are not allowed to access this resource!
        @endalert

12 - Utilizando o Bootstrap 4
    O comando npm install instala as dependencias do arquivo package.json
    O comando npm run dev compila as dependencias da pasta public em um unico arquivo, app.js e app.css

13 - Tinker
    Executar codigos pelo terminal
        php artisan tinker
    Listar registros 
        use \App\Brand;   
        Brand::all();
    Inserindo registros
        #Tem que criar um objeto para cada inserção
            $brand = new Brand()
            $brand->name = "Teste 3
            $brand->save();

        #Mass Assignment
        #Para inserir registros em uma unica linha temos que criar o atributo protected $fillable com os atributos que serão inseridos
        # Tem que dar um quit no tinker para ter efeito
            use \App\Brand;
            $brand = Brand::create(['name'=>'Mass']);
    Consultas
        #Com o find compara sempre com a chave primaria
            Brand::find(1)
            Brand::find([1,2])

        #Com o where, sem o método get retorna o Builder,permitindo encadear novos Builders e no final chamar o método get()
            Brand::where('id',1)->get()

            Brand::where('id','<>','1')->get(); #Pode ser =,<>,>,<

            Brand::whereBetween('id',[1,3])->get();
            Brand::whereNotBetween('id',[1,3])->get();
            Brand::whereNotIn('id',[1,3])->get();
            Brand::whereIn('id',[1,3])->get();

        #LIKE
            Brand::where('name','like','%Mas%')->get();

            #Aspas simples vs dupla
                $name = 'Teste';
            #Ao usar aspas simples no método where ele irá comparar com $name exatamente,ele ira procurar pela string $name
                Brand::where('name','like','%$name%')->get();
            #Ao usar aspas duplas no método where ele irá comparar com o conteudo da variavel $name
                Brand::where('name','like',"%$name%")->get();
        
        #Encadeamento de queries
            #É possivel encadear queries pois o método where retorna um Builder
            #Nesse caso será feito uma operação AND, onde id > 1 && name="Teste 2"
                Brand::where('id','>','1')->where('name','Teste 2')->get();
            #Operação Or
                Brand::where('id','>','1')->orWhere('name','Teste 2')->get();
            
        #Agrupando queries
            #Se quisermos fazer a seguinte a operação (id>1 and id<4) and ('name' ='Teste 2' or 'name' = 'Mass')
            
                Brand::where( 
                    function($query){ 
                        $query->where('id','>','1')->where('id','<','4');
                    }
                )->where(
                    function($query){ 
                        $query->where('name','=','Teste 2')->orWhere('name','Mass');
                    }
                )->get();
        #Ordenando
            Brand::orderBy('name')->get()
            Brand::where('id','>','1')->orderBy('name','desc')->get()

        #Collections
           
        
        #Atualizando
            $brand = Brand::find(1)
            $brand->name = 'SS';
            $brand->save()

            #atualizando varias colunas
                 $brand = Brand::find(1)
                 $brand->fill(['name'=>'SemSunga'])
                 $brand->save()

            #usando where e alterando varios registros
                Brand::where('id','>','2')->update(['name'=>'TUDO IGUAL'])


        #Apagar
                $brand = Brand::find(1)
                $brand->delete();

                Brand::destroy('1');

                Brand::where('id','>','3');

        #SoftDelete
                Tem que alterar na migrations 
                    $table->softDelete();
                e na Model
                    use SoftDeletes;//é um Trait


                $brands = Brand::all();
                $brands[0]->delete();

                #Retornar também os registros apagados
                    Brand::withTrashed()

                #Retorna true se o registro está apagado
                 $brands = Brand::withTrashed();
                 $brands[0]->trashed();

                #Retorna somente os registros apagados
                    $brands = Brand::onlyTrashed()->get();
                
                #Restaurar um elemento apagado
                    $brands[0]->restore();
                #Forçar um registro a ser apagado
                    Brand::find(11)->forceDelete();
                    $brands[0]->forceDelete()

---------------------------------------SEÇÃO 10---------------------------------------------------------------------------




